COMPILER Tastier

   const int // object kinds
      var = 0, proc = 1, constant = 3, array = 4;

   const int // types
      undef = 0, integer = 1, boolean = 2;

   public SymbolTable tab;
   public CodeGenerator gen;
  
/*-------------------------------------------------------------------------------------------*/

CHARACTERS

  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  digit = "0123456789".
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  stringCh = ANY - '"' - '\\' - cr - lf - tab.
  printableCh = '\u0020' .. '\u007e'.

/*-------------------------------------------------------------------------------------------*/

TOKENS

  number = digit { digit }.
  ident = letter { letter | digit }.
  string = '"' {stringCh | '\\' printableCh} '"'.

/*-------------------------------------------------------------------------------------------*/

COMMENTS FROM "//" TO lf
COMMENTS FROM "/*" TO "*/" NESTED

/*-------------------------------------------------------------------------------------------*/

IGNORE cr + lf + tab

/*-------------------------------------------------------------------------------------------*/

PRODUCTIONS

AddOp<out Op op>
=                        (. op = Op.ADD; .)
  ( '+'
  | '-'                  (. op = Op.SUB; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

ArrayDecl
=                        (. int type; int type2; int size = 0;int size2 = 0; string name; .)  
  "[""]"
  [
  "["
  "]"
  ]
  Type<out type>  
  Ident<out name>         
  [":="
  "new"
  "["
  number                 (. size = Convert.ToInt32(t.val); .)
  "]"
  [
  "["
  number                 (. size2 = Convert.ToInt32(t.val); .)
  "]"
  ]
  Type<out type2>        (. if(type != type2){SemErr("incompatible type");} .)
  ]

                         (. if(type == integer||type == boolean){
                            tab.NewObj(name, array, type, size, size2);} 
                         .)
  ";"
.  

/*------------------------------------------------------------------

ArrayDecl2D
=                        (. int type; int type2;int size2 = 0; int size = 0; string name; .)  
  "[""]"
  "[""]"
  Type<out type>  
  Ident<out name>         
  [":="
  "new"
  "["
  number                 (. size = Convert.ToInt32(t.val); .)
  "]"
  "["
  number                 (. size2 = Convert.ToInt32(t.val); .)
  "]"
  Type<out type2>        (. if(type != type2){SemErr("incompatible type");} .)
  ]

                         (. if(type == integer||type == boolean){
                              tab.NewObj(name, array, type, size, size2);
                            } 
                         .)
  ";"
.  

-------------------------------------------------------------------------------------------*/


Expr<out int reg,        // load value of Expr into register
     out int type>       (. int typeR, regR; Op op; .)
  = SimExpr<out reg,
            out type>
  [ RelOp<out op>
    SimExpr<out regR,
            out typeR>   (.
                            if (type == typeR) {
                               type = boolean;
                               gen.RelOp(op, reg, regR);
                            }
                            else SemErr("incompatible types");
                         .)
   ]                     (. gen.ClearRegisters(); .)
.

/*-------------------------------------------------------------------------------------------*/

ConstDecl               (. string name; int type; .)
= "const"
  Type<out type>        //final 2 parameters don't matter because the object isn't an array
  Ident<out name>       (. tab.NewObj(name, constant, type, 1, 0); .)
  { ','
        Ident<out name> (. tab.NewObj(name, constant, type, 1, 0); .)
  } ';' 
. 

/*-------------------------------------------------------------------------------------------*/

Primary<out int reg,     // load Primary into register
        out int type>    (. int n; Obj obj; string name; int index=0;int index2; .)
=                        (.
                            type = undef;
                            reg = gen.GetRegister();
                         .)
  ( Ident<out name>      (.
                            obj = tab.Find(name); type = obj.type;.)
  [
  "["
  number                    (. index = Convert.ToInt32(t.val)+1; .)
  "]"
  [
  "["
  number                     (. index2 = Convert.ToInt32(t.val)+1; 
                                index2 = index2 * obj.length;
                                index = index + index2;
                             .)
 "]"
  ]
  ] 
                          (.  if (obj.kind == var||obj.kind == array||obj.kind == constant) {
                               if (obj.level == 0)
                                  gen.LoadGlobal(reg, obj.adr + index, name);
                               else
                                  gen.LoadLocal(reg, tab.curLevel-obj.level + index, obj.adr, name);
                               if (type == boolean)
                               // reset Z flag in CPSR
                                  gen.ResetZ(reg);
                            }
                            else SemErr("variable expected");
                         .)

  | number               (.
                            type = integer;
                            n = Convert.ToInt32(t.val);
                            gen.LoadConstant(reg, n);
                         .)

  | '-'
    Primary<out reg,
            out type>     (.
                            if (type == integer)
                               gen.NegateValue(reg);
                            else SemErr("integer type expected");
                         .)

  | "true"               (.
                               type = boolean;
                               gen.LoadTrue(reg);
                         .)

  | "false"              (.
                               type = boolean;
                               gen.LoadFalse(reg);
                         .)

  | '('
    Expr<out reg,
         out type>
    ')'

  )
.

/*-------------------------------------------------------------------------------------------*/

Ident<out string name>
= ident                  (. name = t.val; .)
.

/*-------------------------------------------------------------------------------------------*/

String<out string text>
= string                  (. text = t.val; .)
.

/*-------------------------------------------------------------------------------------------*/

MulOp<out Op op>
=                        (. op = Op.MUL; .)
  ( '*'
  | ("div" | "DIV")      (. op = Op.DIV; .)
  | ("mod" | "MOD")      (. op = Op.MOD; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

ProcDecl<string progName>
                         (. Obj obj; string procName; .)
= "void"
  Ident<out procName>    (.
                            obj = tab.NewObj(procName, proc, undef);
                            if (procName == "main")
                               if (tab.curLevel == 0)
                                  tab.mainPresent = true;
                               else SemErr("main not at lexic level 0");
                            tab.OpenScope();
                         .)
  '('')'
  '{'
     {
     VarDecl|ConstDecl|ArrayDecl
     }
     {
     ProcDecl<progName>
     }                   (.
                            if (procName == "main")
                               gen.Label("Main", "Body");
                            else {
                               gen.ProcNameComment(procName);
                               gen.Label(procName, "Body");
                            }
                         .)
     Stat { Stat }
  '}'                    (.
                            if (procName == "main") {
                               gen.StopProgram(progName);
                               gen.Enter("Main", tab.curLevel, tab.topScope.nextAdr);
                            } else {
                               gen.Return(procName);
                               gen.Enter(procName, tab.curLevel, tab.topScope.nextAdr);
                            }
                            tab.CloseScope();
                         .)
.

/*-------------------------------------------------------------------------------------------*/

RelOp<out Op op>
=                        (. op = Op.EQU; .)
  ( "="
  | '<'                  (. op = Op.LSS; .)
  | '>'                  (. op = Op.GTR; .)
  | "!="                 (. op = Op.NEQ; .)
  | "<="                 (. op = Op.LEQ; .)
  | ">="                 (. op = Op.GEQ; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

SimExpr<out int reg,     //load value of SimExpr into register
        out int type>    (. int typeR, regR; Op op; .)
= Term<out reg,
       out type>
  { AddOp<out op>
    Term<out regR,
         out typeR>      (.
                            if (type == integer && typeR == integer)
                               gen.AddOp(op, reg, regR);
                            else SemErr("integer type expected");
                         .)
  }
.

/*-------------------------------------------------------------------------------------------*/

Stat                     (. int type; string name; Obj obj; int reg;int index = 0;int index2 = 0; .)
= Ident<out name>        (. obj = tab.Find(name); .)
  [
   "["
    number               (. index = Convert.ToInt32(t.val)+1; .)
    "]"
  ]
  [
    "["
    number               (. index2 = Convert.ToInt32(t.val)+1; 
                            index2 = index2 * obj.length;
                            index = index + index2;
                         .)
    "]"
  ]
  ( ":="                 (.
                            if(obj.kind == var||obj.kind == array)
                            {}
                            else if(obj.kind == constant&&obj.ConstHas == false){
                               obj.ConstHas = true;
                            }
                            else{
                               if(obj.kind == constant)
                                  SemErr("cannot assign value to constant");
                               else{
                                  SemErr("cannot assign to procedure");
                               }
                            }
                         .)

    Expr<out reg,
         out type> 
    (";"                  (.
                            if (type == obj.type)
                               if (obj.level == 0)
                                  gen.StoreGlobal(reg, obj.adr + index, name);
                               else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr + index, name);
                         .)
    
  | "?"                  (. int l1, l2; l1 = gen.NewLabel(); l2 = gen.NewLabel();
                            if(type != boolean){
                              SemErr("conditional assignments expect a boolean expression");
                            } 
                            gen.BranchFalse(l1);
                         .)
     Expr<out reg,         
          out type> ":"  (. 
                            if(type != obj.type){SemErr("type mis-match on assignment");}
                            if (obj.level == 0)
                                  gen.StoreGlobal(reg, obj.adr + index, name);
                            else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr + index, name);
                            gen.Branch(l2);
                            gen.Label(l1);
                         .)
    Expr<out reg,
         out type> ";"   (. 
                            if (obj.level == 0)
                                  gen.StoreGlobal(reg, obj.adr + index, name);
                               else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr + index, name);
                            gen.Label(l2);
                         .)
  )  
  | '(' ')' ';'          (.
                            if (obj.kind == proc)
                               gen.Call(name);
                            else SemErr("object is not a procedure");
                         .)
  )


| "if"                   (. int l1, l2; l1 = 0; .)
  Expr<out reg,
       out type>         (.
                            if (type == boolean) {
                               l1 = gen.NewLabel();
                               gen.BranchFalse(l1);
                            }
                            else SemErr("boolean type expected");
                         .)
      Stat               (.
                            l2 = gen.NewLabel();
                            gen.Branch(l2);
                            gen.Label(l1);
                         .)
      [ "else"
      Stat
      ]               	 (. gen.Label(l2); .)

| "while"                (.
                            int l1, l2;
                            l1 = gen.NewLabel();
                            gen.Label(l1); l2=0;
                         .)
  Expr<out reg,
       out type>         (.
                            if (type == boolean) {
                               l2 = gen.NewLabel();
                               gen.BranchFalse(l2);
                            }
                            else SemErr("boolean type expected");
                         .)
   Stat                  (.
                            gen.Branch(l1);
                            gen.Label(l2);
                         .)

| "for""("               (.
                           int l3, l2, l1, reg2; Obj obj2;
                           l2 = 0; l1 = 0; l3 = gen.NewLabel();
                        .)
  
    Ident<out name>      (. 
                            obj = tab.Find(name);                         
                            if(obj.type == boolean){
                               SemErr("initial action cannot be of type boolean");
                            }
                         .)
    ":="
    Expr<out reg,
         out type> ";"   (. 
                            if (type == obj.type){
                               l1 = gen.NewLabel();
                               if (obj.level == 0)
                                  gen.StoreGlobal(reg, obj.adr + index, name);
                               else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr + index, name);
                            }
                            gen.Branch(l3);
                         .)

     Ident<out name>    (. 
                           gen.Label(l1);
                           obj2 = tab.Find(name);                         
                           if(obj2.type == boolean){
                               SemErr("initial action cannot be of type boolean");
                           }
                         .)
    ":="
    Expr<out reg2,
         out type> ";"   (. 
                            if(type != obj.type){
                               SemErr("type mis-match of expression");
                            }
                            if(obj.level == 0){
                               gen.StoreGlobal(reg2, obj.adr + index, name);
                            }
                            else{ 
                               gen.StoreLocal(reg2, tab.curLevel-obj.level, obj.adr + index, name);
                            }
                            gen.Label(l3);
                         .)
    Expr<out reg,
         out type> ";"")"(. 
                            if(type == boolean){
                              l2 = gen.NewLabel();
                              gen.BranchFalse(l2);
                            } 
                         .)
    Stat                 (. 
                            if(obj.level == 0){
                               gen.StoreGlobal(reg2, obj.adr + index, name);
                            }
                            else{ 
                               gen.StoreLocal(reg2, tab.curLevel-obj.level, obj.adr + index, name);
                            }
                            gen.Branch(l1);
                            gen.Label(l2);
                        .)
                         
| "read"
  Ident<out name> ';'    (.
                            obj = tab.Find(name);
                            if (obj.type == integer) {
                               gen.ReadInteger(); 
                               if (obj.level == 0)
                                  gen.StoreGlobal(0, obj.adr + index, name);
                               else gen.StoreLocal(0, tab.curLevel-obj.level +index, obj.adr, name);
                            }
                            else SemErr("integer type expected");
                         .)

| "write"                (. string text; .)
  (
    Expr<out reg,
         out type>       (.
                            switch (type) {
                               case integer: gen.WriteInteger(reg, false);
                                             break; 
                               case boolean: gen.WriteBoolean(false);
                                             break;
                            }
                         .)
  | String<out text>     (. gen.WriteString(text); .)
  )
  ';'

| "writeln"
  // note - for strings use write with \n in text
  Expr<out reg,
       out type>           (.
                              switch (type) {
                                 case integer: gen.WriteInteger(reg, true);
                                               break;
                                 case boolean: gen.WriteBoolean(true);
                                               break;
                              }
                           .)
  ';'

| '{'                      (. tab.OpenSubScope(); .)
  { VarDecl }
  Stat { Stat }
  '}'                      (. tab.CloseSubScope(); .)
.

/*-------------------------------------------------------------------------------------------*/

Tastier                  (. string progName; .)
  = "program"
  Ident<out progName>    (. tab.OpenScope(); .)
  '{'
    { VarDecl|ConstDecl|ArrayDecl }          // global variables
    { ProcDecl<progName> }
                         (. tab.CloseScope(); .)
  '}'
.

/*-------------------------------------------------------------------------------------------*/

Term<out int reg,        // load value of Term into register
     out int type>       (. int typeR, regR; Op op; .)
  = Primary<out reg,
            out type>
  { MulOp<out op>
    Primary<out regR,
            out typeR>
                         (.
                            if (type == integer && typeR == integer)
                               gen.MulOp(op, reg, regR);
                            else SemErr("integer type expected");
                         .)
  }
.

/*-------------------------------------------------------------------------------------------*/

Type<out int type>
=                        (. type = undef; .)
 ( "int"                 (. type = integer; .)
 | "bool"                (. type = boolean; .)
 )
.

/*-------------------------------------------------------------------------------------------*/

VarDecl                  (. string name; int type; .)
= Type<out type>
  Ident<out name>        (. tab.NewObj(name, var, type); .)
  { ","
    Ident<out name>      (. tab.NewObj(name, var, type); .)
  } ";"
.

END Tastier.
